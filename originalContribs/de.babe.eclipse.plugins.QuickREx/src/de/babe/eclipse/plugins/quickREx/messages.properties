QuickRExPlugin.error.message1=Can not read regular expressions from file\!
QuickRExPlugin.error.message2=Can not create file for regular expressions\!
QuickRExPlugin.error.message3=Can not read test-texts from file\!
QuickRExPlugin.error.message4=Can not create file for test-texts\!
QuickRExPlugin.error.message5=Can not save regular expressions\!
QuickRExPlugin.error.message6=Can not save test-texts\!
QuickRExPlugin.error.message7=Can not read JDK-completions from file\!
QuickRExPlugin.error.message8=Can not read ORO-Awk completions from file\!
QuickRExPlugin.error.message9=Can not read ORO-Perl completions from file\!
dialogs.OrganizeTestTextDialog.title=Test Text organization...
dialogs.OrganizeREsDialog.button.delete=&Delete
dialogs.OrganizeREsDialog.button.close=&Close
dialogs.OrganizeREsDialog.title=Reg. Exp. organization...
dialogs.OrganizeREsDialog.messageLabel1=
dialogs.OrganizeREsDialog.nameLabel1=Select Reg. Exp.(s):
dialogs.SimpleTextDialog.button.close=&Close
dialogs.OrganizeREsDialog.messageLabel2=Please select a Reg. Exp.\!
dialogs.OrganizeREsDialog.messageLabel3=Reg. Exp.(s) deleted...
dialogs.OrganizeTestTextDialog.errror.message1=type not recognized: 
dialogs.OrganizeTestTextDialog.error.message2=type not recognized: 
dialogs.OrganizeTestTextDialog.button.browse=&Browse...
dialogs.OrganizeTestTextDialog.button.delete=&Delete
dialogs.OrganizeTestTextDialog.button.close=&Close
dialogs.OrganizeTestTextDialog.nameLabel.text1=Saved Texts:
dialogs.OrganizeTestTextDialog.textLabel.text1=Text:
dialogs.OrganizeTestTextDialog.messageLabel.text1=Select a saved text by name or press 'Browse...' to load file-contents...
dialogs.OrganizeTestTextDialog.nameLabel.text2=Saved Texts:
dialogs.OrganizeTestTextDialog.textLabel.text2=Text:
dialogs.OrganizeTestTextDialog.nameLabel.text3=Enter a name:
dialogs.OrganizeTestTextDialog.textLabel.text3=Text:
dialogs.OrganizeTestTextDialog.messageLabel.text3=Name in use - OK overwrites\!
dialogs.OrganizeTestTextDialog.messageLabel.text4=Please enter a name\!
dialogs.OrganizeTestTextDialog.messageLabel.text5=Please select a name\!
dialogs.OrganizeTestTextDialog.messageLabel.text6=Text deleted...
dialogs.OrganizeTestTextDialog.messageLabel.text7=Please enter a name\!
dialogs.OrganizeTestTextDialog.messageLabel.text8=Please select a name\!
dialogs.OrganizeTestTextDialog.error.message3=The file can not be read\!
regexp.MatchSetFactory.error.message1=Unknown Reg-Exp flavour requested: 
regexp.MatchSetFactory.error.message2=Unknown Reg-Exp flavour requested: 
regexp.jdk.JavaFlag.canon_eq=Canonical equivalence
regexp.jdk.JavaFlag.canon_eq.description=When this flag is specified then two characters will be considered to match if,\nand only if, their full canonical decompositions match.\nThe expression "a\\u030a", for example, will match the string\n"?" when this flag is specified. By default, matching does not\ntake canonical equivalence into account.\n\nThere is no embedded flag character for enabling\ncanonical equivalence.
regexp.jdk.JavaFlag.unicode_case=Unicode case
regexp.jdk.JavaFlag.unicode_case.description=When this flag is specified then case-insensitive matching, when enabled by the\nCASE_INSENSITIVE flag, is done in a manner consistent with\nthe Unicode Standard. By default, case-insensitive matching\nassumes that only characters in the US-ASCII charset are being matched.\n\nUnicode-aware case folding can also be enabled via the embedded flag\nexpression (?u).
regexp.jdk.JavaFlag.dotall=Dotall
regexp.jdk.JavaFlag.dotall.description=In dotall mode, the expression . matches any character, including a line terminator.\nBy default this expression does not match line terminators.\n\nDotall mode can also be enabled via the embedded flag expression (?s).
regexp.jdk.JavaFlag.multiline=Multiline
regexp.jdk.JavaFlag.multiline.description=In multiline mode the expressions ^ and $ match just after or just before, respectively,\na line terminator or the end of the input sequence. By default\nthese expressions only match at the beginning and the end of the\nentire input sequence.\n\nMultiline mode can also be enabled via the embedded flag expression (?m).
regexp.jdk.JavaFlag.comments=Comments
regexp.jdk.JavaFlag.comments.description=In this mode, whitespace is ignored, and embedded comments starting with \# are ignored\nuntil the end of a line.\n\nComments mode can also be enabled via the embedded flag expression (?x).
regexp.jdk.JavaFlag.case_insensitive=Case insensitive
regexp.jdk.JavaFlag.case_insensitive.description=In this mode, case-insensitive matching is performed. By default, case-insensitive\nmatching assumes that only characters in the US-ASCII charset are being\nmatched. Unicode-aware case-insensitive matching can be\nenabled by specifying the UNICODE_CASE flag in conjunction with this flag.\n\nCase-insensitive matching can also be enabled via the embedded flag expression (?i).
regexp.jdk.JavaFlag.unix_lines=Unix lines
regexp.jdk.JavaFlag.unix_lines.description=In this mode, only the '\\n' line terminator is recognized in the behavior of ., ^, and $.\n\nUnix lines mode can also be enabled via the embedded flag expression (?d).
regexp.oro.awk.OROAwkFlag.case_insensitive=Case insensitive
regexp.oro.awk.OROAwkFlag.case_insensitive.description=In this mode, the compiled regular expression is case insensitive.
regexp.oro.perl.OROPerlFlag.extended=Extended
regexp.oro.perl.OROPerlFlag.extended.description=In this mode, the compiled regular expression is treated as a Perl5 extended pattern\n(i.e., a pattern using the /x modifier). This option tells the compiler\nto ignore whitespace that is not backslashed or within a character\nclass. It also tells the compiler to treat the \# character as a metacharacter\nintroducing a comment as in Perl. In other words, the \# character will comment\nout any text in the regular expression between it and the next newline.\nThe intent of this option is to allow you to divide your\npatterns into more readable parts. It is provided to maintain\ncompatibility with Perl5 regular expressions, although it will not\noften make sense to use it in Java.
regexp.oro.perl.OROPerlFlag.singleline=Singleline
regexp.oro.perl.OROPerlFlag.singleline.description=In this mode, the compiled regular expression treats input as being a single line.\nThis option affects the interpretation of the ^ and $ metacharacters. When\nthis mask is used, the ^ metacharacter matches at the beginning of the\ninput, and the $ metacharacter matches at the end of the input.\nThe ^ and $ metacharacters will not match at the beginning and end of lines occurring\nbetween the beginning and end of the input. Additionally,\nthe . metacharacter will match newlines when an expression is compiled with\nSINGLELINE_MASK, unlike its default behavior.
regexp.oro.perl.OROPerlFlag.multiline=Multiline
regexp.oro.perl.OROPerlFlag.multiline.description=In this mode, the compiled regular expression treats input as having multiple lines.\nThis option affects the interpretation of the ^ and $ metacharacters. When\nthis mask is used, the ^ metacharacter matches at the beginning of every\nline, and the $ metacharacter matches at the end of every line.\nAdditionally the . metacharacter will not match newlines when an expression is compiled with\nMULTILINE_MASK, which is its default behavior.
regexp.oro.perl.OROPerlFlag.case_insensitive=Case insensitive
regexp.oro.perl.OROPerlFlag.case_insensitive.description=In this mode, the compiled regular expression is case insensitive.
views.QuickRExView.global.flags=Global Flags
views.QuickRExView.global.flags.description=You can configure the global flags used for the creation of the regular-expression compilers here. The flags are 'sticky', i.e. they are saved as state when the view is closed.
views.QuickRExView.jdk.flags=JDK Flags:
views.QuickRExView.perl.flags=ORO Perl Flags:
views.QuickRExView.awk.flags=ORO Awk Flags:
views.QuickRExView.forthrow.label=Groups:
views.QuickRExView.forthrow.prev=P&revious
views.QuickRExView.forthrow.next=N&ext
views.QuickRExView.thridrow.label=Matches:
views.QuickRExView.thridrow.prev=&Previous
views.QuickRExView.thirdrow.next=&Next
views.QuickRExView.thirdrow.message=Not evaluated yet...
views.QuickRExView.secondrow.label=Test-Text:
views.QuickRExView.firstrow.label=Regular Expression:
views.QuickRExView.organizeREsAction.text=Organize Reg. Exp.s...
views.QuickRExView.organizeREsAction.tooltip=Organize the Regular Expressions kept in history...
views.QuickRExView.organizeTestTextsAction.text=Organize Test-Texts...
views.QuickRExView.organizeTestTextsAction.tooltip=Organize the Test Texts kept in history...
views.QuickRExView.useJDKREAction.text=Java (JDK) Reg. Exp.s
views.QuickRExView.useJDKREAction.text.tooltip=Use the JDK-provided Regular Expressions implementation
views.QuickRExView.useOROPerlREAction.text=ORO Perl 5 Reg. Exp.s
views.QuickRExView.useOROPerlREAction.tooltip=Use the Jakarta-ORO Perl 5 Regular Expressions implementation
views.QuickRExView.useOROAWKAction.text=ORO AWK Reg. Exp.s
views.QuickRExView.useOROAWKAction.tooltip=Use the Jakarta-ORO AWK Regular Expressions implementation
views.QuickRExView.keepREAction.text=Keep Reg.Exp.
views.QuickRExView.keepREAction.tooltip=Keep the regular expression for later use
views.QuickRExView.saveTextAction.text=Save Text-text
views.QuickRExView.saveTextAction.tooltip=Save the test-text for later use
views.QuickRExView.loadTextAction.text=Load Text-text
views.QuickRExView.loadTextAction.tooltip=Load test-text from a file or from\npreviously saved test-texts
views.QuickRExView.jcopyAction.text=Copy RE to Java
views.QuickRExView.jcopyAction.tooltip=Copy the current regular expression to the current\neditor, escaping it to be used as Java-String
views.QuickRExView.grepAction.text=Grep
views.QuickRExView.grepAction.tooltip=Grep the test-text (extract matches to a dialog)
views.QuickRExView.dlg.title=QuickREx - Grep
views.QuickRExView.result.group={0}, current is number {1} {2}
views.QuickRExView.result.group.none=none
views.QuickRExView.result.match={0}, current is from {1} to {2}
views.QuickRExView.result.match.none=none
views.QuickRExView.result.match.illigal=Illegal Pattern: {0}

